input AddTodoItemInput {
  name: String!
  issueId: ID!
  clientMutationId: String
}

type AddTodoItemPayload {
  todoItem: TodoItem
  clientMutationId: String
}

type Issue implements Node {
  # The ID of an object
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
  todoItems: [TodoItem]
}

# A connection to a list of items.
type IssuesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [IssuesEdge]
}

enum IssuesConnectionOrder {
  ID
}

# An edge in a connection.
type IssuesEdge {
  # The item at the end of the edge
  node: Issue

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addTodoItem(input: AddTodoItemInput!): AddTodoItemPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
}

type TodoItem implements Node {
  # The ID of an object
  id: ID!
  name: String!
  completed: Boolean!
  createdAt: String!
  updatedAt: String!
  IssueId: Int
}

# A person who uses our app
type User implements Node {
  # The ID of an object
  id: ID!

  # Users's username
  username: String

  # User's website
  website: String
  issues(after: String, first: Int, before: String, last: Int, orderBy: [IssuesConnectionOrder]): IssuesConnection
}
